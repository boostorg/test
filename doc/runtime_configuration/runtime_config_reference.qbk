[/
 / Copyright (c) 2003 Boost.Test team 
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[section:rt_param_reference Runtime parameters reference]

Each parameter specification includes: 

# the full parameter name
# corresponding environment variable name
# command line argument name
# acceptable values and 
# a long description

The default value for the parameter is bold in the acceptable values list. 

[h4 Parameter value formats]

The __UTF__ runtime parameters take value of the following types: string, boolean, enumeration, 
unsigned, long. Formats required for values of these types are following:

[h5 String, unsigned, long][#regular_param_value]
                                                                              
Value of these types are expected in the same format they are represented in C++.

[h5 Boolean][#boolean_param_value]

Values of these types are options with yes/no or true/false meaning. True values are represented
by case insensitive strings: "Y", "YES", "TRUE", "1". False values are represented by case 
insensitive strings: "N", "NO", "FALSE", "0".
 
[h5 Enumeration][#enum_param_value]

Values of enumeration type are expected as case sensitive strings representintive 
enumeration value names. Each parameter with enumeration value lists all valid names in the 
parameter`s description.

[/ ###############################################################################################]

[section:auto_dbg `auto_start_dbg`]

Automatically attach debugger in case of system failure.

Option ['auto_start_dbg] specifies whether Boost.Test should attempt to attach a debugger when fatal system 
error occurs. At the moment this feature is only available on a few selected platforms: Win32 and *nix. There is a 
default debugger configured for these platforms. You can manually configure different debugger. 
For more details on how to configure the debugger see the [headerref boost/test/debug.hpp Boost.Test debug API], 
specifically the function [funcref boost::debug::set_debugger].

[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]

BOOST_TEST_AUTO_START_DBG

[endsect] [/auto_start_dbg]

[/ ###############################################################################################]

[section:build_info `build_info`]

Option ['build_info] tells the __UTF__ to display the build information before testing begins.
This information includes: 

* platform
* compiler
* STL implementation in use
* boost version

[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]

BOOST_TEST_BUILD_INFO

[endsect] [/ build_info]

[/ ###############################################################################################]
[section:catch_system `catch_system_errors`]

If option ['catch_system_errors] has value "no" the __UTF__ does not attempt to catch asynchronous system failures 
(signals on *NIX platforms or structured exceptions on Windows). This can be used for test programs executed 
within IDE or to get a coredump for stack analysis. See 
[link ref_usage_recommendations usage recommendations] pages for more details.

[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[note The __UTF__ can be built with flag BOOST_TEST_DEFAULTS_TO_CORE_DUMP in which case default changes to [*yes]]

[h4 Environment variable]

BOOST_TEST_CATCH_SYSTEM_ERRORS

[endsect] [/catch_system_errors]

[/ ###############################################################################################]
[section:color_output `color_output`]

The __UTF__ is able to produce color output on systems which supports it. To enable this behavior set this option to 
`yes`. By default the framework does not produces color output.
      
[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]

BOOST_TEST_COLOR_OUTPUT

[endsect] [/color_output]

[/ ###############################################################################################]
[section:detect_fp_exceptions `detect_fp_exceptions`]

Option ['build_info] enables/disables hardware traps for the floating point exceptions (if supported on your platform).
      
[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]

BOOST_TEST_DETECT_FP_EXCEPTIONS

[endsect] [/detect_fp_exceptions]  

[/ ###############################################################################################]
[section:detect_memory_leaks `detect_memory_leaks`]

Parameter ['detect_memory_leaks] enables/disables memory leaks detection (if present in your build configuration). 
This parameter has optional long integer value. The default value is 1, which enables the memory leak detection. 
The value 0 disables memory leak detection. Any value N greater than 1 is treated as leak allocation number and tells the 
framework to setup runtime breakpoint at Nth heap allocation. If value is omitted the default value is assumed. 

[note The only platform which supports memory leak detection is Microsoft Visual Studio family of compilers in debug builds.]
      
[h4 Acceptable values]

* 0 
* [*1] (default)
* integer value > 1

[h4 Environment variable]

BOOST_TEST_DETECT_MEMORY_LEAK

[endsect] [/detect_memory_leaks]  

[/ ###############################################################################################]
[section:list_content `list_content`]

Lists the content of the tests that would be run. If set on the command line, no test will be run and the content
of the test bed will be printed, one test per line.

[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]
  
BOOST_TEST_LIST_CONTENT

[endsect] [/list_content]

[/ ###############################################################################################]
[section:log_format `log_format`]

Allows selecting the __UTF__ log format from the list of formats supplied by the framework. To specify custom log
format use the [link ref_log_formatter_api custom log formatting API].
      
[h4 Acceptable values]

* [*HRF] (default)
* XML

['HRF] stands for human readable format, while ['XML] is dedicated to  automated output processing

[h4 Environment variable]

BOOST_TEST_LOG_FORMAT

[endsect] [/log_format]

[/ ###############################################################################################]
[section:log_level `log_level`]

Allows setting the __UTF__ [link ref_log_level_explanations log level] in a range from a
complete log, when all successful tests are confirmed and all test suite messages are included, to an empty
log when nothing is logged a test output stream. 

[note Log levels are accumulating, in other words each log level includes also all the information reported  by less restrictive ones.]
      
[h4 Acceptable values]

[table Log levels
  [
    [value]
    [feature]
  ]
  [
    [all]
    [report all log messages including the passed test notification]
  ]
  [
    [success]
    [the same as all]
  ]
  [
    [test_suite]
    [Shows test suite messages]
  ]
  [
    [message]
    [Shows user messages]
  ]  
  [
    [warning]
    [Reports warnings issued by user]
  ]  
  [
    [[*error] (default)]
    [Reports all error conditions]
  ]  
  [
    [cpp_exception]
    [Reports uncaught C++ exception]
  ]  
  [
    [system_error]
    [Reports system originated non-fatal errors. For example, timeout or floating point exception.]
  ]  
  [
    [fatal_error]
    [Reports only user or system originated fatal errors. For example, memory access violation.]
  ]  
  [
    [nothing]
    [Does not report any information.]
  ]  
]

[h4 Environment variable]

BOOST_TEST_LOG_LEVEL

[endsect] [/log_level]

[/ ###############################################################################################]
[section:log_sink `log_sink`]

Sets the logging sink to the one specified.

This parameter allows to easily redirect the test logs. The parameter value is 

* either the string containing either a file name, in which case the __UTF__ will redirect log into this file
* or `stdout` (the default), in which case log is redirected into standard output stream
* or `stderr` , in which case log is redirected into standard error stream.
      
[h4 Acceptable values]

* [*`stdout`] (default)
* `stderr`
* arbitrary file name

[h4 Environment variable]

BOOST_TEST_LOG_SINK

[endsect] [/log_sink]  

[/ ###############################################################################################]
[section:output_format `output_format`]

Combines an effect of __param_report_format__ and __param_log_format__ parameters. Has higher priority than either one of them if specified.      
      
[h4 Acceptable values]

* [*HRF] (default)
* XML

['HRF] stands for human readable format, while ['XML] is dedicated to  automated output processing

[h4 Environment variable]

BOOST_TEST_OUTPUT_FORMAT

[endsect] [/output_format]   

[/ ###############################################################################################]
[section:random `random`]

Runs the tests in random order.

Positive value makes the framework to run the test cases in random order. Also if this value is greater than 1,
it is used as a random seed. In other case random seed is generated based on current time.

[caution If computed from time, the seed is not outputted to the report]
      
[h4 Acceptable values]

* [*0] (default)
* 1
* integer value > 1

[h4 Environment variable]

BOOST_TEST_RANDOM

[endsect] [/random]  

[/ ###############################################################################################]
[section:report_format `report_format`]

Allows selecting the __UTF__ report format from the list of formats supplied by the framework. To specify a custom report format use unit_test_report API.

[warning Provide something concrete to the user]
      
[h4 Acceptable values]

* [*HRF] (default)
* XML

['HRF] stands for human readable format, while ['XML] is dedicated to  automated output processing

[h4 Environment variable]

BOOST_TEST_REPORT_FORMAT

[endsect] [/report_format]   

[/ ###############################################################################################]
[section:report_level `report_level`]

Allows setting the level of details carried by the testing results report generated by the framework. Use value 
"no" to eliminate the results report completely. See the 
[link ref_tests_report test report] section for description of different report formats.
      
[h4 Acceptable values]

* [*confirm] (default)
* no
* short
* detailed

[h4 Environment variable]

BOOST_TEST_REPORT_LEVEL

[endsect] [/report_level]      

[/ ###############################################################################################]
[section:report_sink `report_sink`]

Sets the report sink to the one specified.

This parameter allows to easily redirect the test result report. See __param_log_sink__ for more details.
      
[h4 Acceptable values]

* [*`stderr`] (default)
* `stdout`
* arbitrary file name

[h4 Environment variable]

BOOST_TEST_REPORT_SINK

[endsect] [/report_sink]  

[/ ###############################################################################################]
[section:result_code `result_code`]

Value "no" enforces the framework to always return zero result code. This could be used for test programs 
executed within GUI. See the [link ref_usage_recommendations usage recommendations] section for more details.
      
[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*yes].

[h4 Environment variable]

BOOST_TEST_RESULT_CODE

[endsect] [/result_code]      

[/ ###############################################################################################]
[section:run_test `run_test`]

Specifies the tests to run. It can be specified more than once.
      
[h4 Acceptable values]

The following grammar productions describe the syntax of allowed values:

```
value         ::= relative_spec? test_set
relative_spec ::= '+' | '!'
test_set      ::= label | path
label         ::= '@' identifier
path          ::= (suite '/')? patern_list
patern_list   ::= (pattern ',')* pattern
suite         ::= (pattern '/')* pattern
pattern       ::= '*'? identifier '*'?
```

Regarding the meaning of these values [link ref_command_line_control see here].

[h4 Environment variable]

  BOOST_TESTS_TO_RUN

[endsect] [/run_test]
  
[/ ###############################################################################################]
[section:save_pattern `save_pattern`]

Provides parameters for testing output streams. See __output_test_stream_tool__ section for details on these tests.

This parameter serves no particular purpose within the framework itself. It can be used by test modules relying 
on [classref boost::test_tools::output_test_stream] to implement testing logic. `output_test_stream` has two modes of operation: 

* save the pattern file 
* and match against a previously stored pattern file. 

You can use this parameter to switch between these modes, by passing the parameter value to the `output_test_stream` constructor.
The value of the command line parameter is available from the code like this:

``
bool is_save_pattern_flag_set = boost::unit_test::runtime_config::save_pattern();
``
      
[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]

BOOST_TEST_SAVE_PATTERN

[endsect] [/save_pattern] 

[/ ###############################################################################################]
[section:show_progress `show_progress`]

Makes the framework to print progress information. More details [link boost_test.test_output.test_output_progress here].

[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*no].

[h4 Environment variable]

BOOST_TEST_SHOW_PROGRESS

[endsect]

[/ ###############################################################################################]
[section:use_alt_stack `use_alt_stack`]

Uses an alternative stack.

Specifies whether or not the execution monitor should employ an alternative stack for signals 
processing, on platforms where they are supported.

[warning indicate which platforms are supported]
[warning add a link to the execution monitor]
      
[h4 Acceptable values]

[link boolean_param_value Boolean] with default value [*yes].

[h4 Environment variable]

BOOST_TEST_USE_ALT_STACK

[endsect] [/use_alt_stack]  

[endsect] [/ runtime parameters reference]
